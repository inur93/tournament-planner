/* tslint:disable */
/* eslint-disable */
/**
 * TournamentPlanner.Backend.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FixtureDto
 */
export interface FixtureDto {
    /**
     * 
     * @type {string}
     * @memberof FixtureDto
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof FixtureDto
     */
    'homeScore'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FixtureDto
     */
    'awayScore'?: number | null;
    /**
     * 
     * @type {TeamDto}
     * @memberof FixtureDto
     */
    'home'?: TeamDto;
    /**
     * 
     * @type {TeamDto}
     * @memberof FixtureDto
     */
    'away'?: TeamDto;
}
/**
 * 
 * @export
 * @interface KnockoutTournamentDto
 */
export interface KnockoutTournamentDto {
    /**
     * 
     * @type {string}
     * @memberof KnockoutTournamentDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof KnockoutTournamentDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof KnockoutTournamentDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof KnockoutTournamentDto
     */
    'tournamentType'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof KnockoutTournamentDto
     */
    'numPromoted'?: number;
}
/**
 * 
 * @export
 * @interface KnockoutTournamentForCreation
 */
export interface KnockoutTournamentForCreation {
    /**
     * 
     * @type {number}
     * @memberof KnockoutTournamentForCreation
     */
    'numTeams'?: number;
    /**
     * 
     * @type {string}
     * @memberof KnockoutTournamentForCreation
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof KnockoutTournamentForCreation
     */
    'numGroups'?: number;
    /**
     * 
     * @type {number}
     * @memberof KnockoutTournamentForCreation
     */
    'groupStageLegs'?: number;
    /**
     * 
     * @type {number}
     * @memberof KnockoutTournamentForCreation
     */
    'numPromoted'?: number;
    /**
     * 
     * @type {number}
     * @memberof KnockoutTournamentForCreation
     */
    'knockoutLegs'?: number;
}
/**
 * 
 * @export
 * @interface TeamDto
 */
export interface TeamDto {
    /**
     * 
     * @type {string}
     * @memberof TeamDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface TournamentDetailsDto
 */
export interface TournamentDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof TournamentDetailsDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TournamentDetailsDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TournamentDetailsDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof TournamentDetailsDto
     */
    'tournamentType'?: string | null;
    /**
     * 
     * @type {Array<FixtureDto>}
     * @memberof TournamentDetailsDto
     */
    'fixtures'?: Array<FixtureDto> | null;
}
/**
 * 
 * @export
 * @interface TournamentDto
 */
export interface TournamentDto {
    /**
     * 
     * @type {string}
     * @memberof TournamentDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TournamentDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TournamentDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof TournamentDto
     */
    'tournamentType'?: string | null;
}

/**
 * TournamentApi - axios parameter creator
 * @export
 */
export const TournamentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {KnockoutTournamentForCreation} [knockoutTournamentForCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKnockoutTournament: async (knockoutTournamentForCreation?: KnockoutTournamentForCreation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tournaments/knockout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(knockoutTournamentForCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTournamentById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTournamentById', 'id', id)
            const localVarPath = `/api/tournaments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTournaments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tournaments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TournamentApi - functional programming interface
 * @export
 */
export const TournamentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TournamentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {KnockoutTournamentForCreation} [knockoutTournamentForCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKnockoutTournament(knockoutTournamentForCreation?: KnockoutTournamentForCreation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KnockoutTournamentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKnockoutTournament(knockoutTournamentForCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTournamentById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TournamentDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTournamentById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTournaments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TournamentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTournaments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TournamentApi - factory interface
 * @export
 */
export const TournamentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TournamentApiFp(configuration)
    return {
        /**
         * 
         * @param {KnockoutTournamentForCreation} [knockoutTournamentForCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKnockoutTournament(knockoutTournamentForCreation?: KnockoutTournamentForCreation, options?: any): AxiosPromise<KnockoutTournamentDto> {
            return localVarFp.createKnockoutTournament(knockoutTournamentForCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTournamentById(id: string, options?: any): AxiosPromise<TournamentDetailsDto> {
            return localVarFp.getTournamentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTournaments(options?: any): AxiosPromise<Array<TournamentDto>> {
            return localVarFp.getTournaments(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TournamentApi - interface
 * @export
 * @interface TournamentApi
 */
export interface TournamentApiInterface {
    /**
     * 
     * @param {KnockoutTournamentForCreation} [knockoutTournamentForCreation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApiInterface
     */
    createKnockoutTournament(knockoutTournamentForCreation?: KnockoutTournamentForCreation, options?: AxiosRequestConfig): AxiosPromise<KnockoutTournamentDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApiInterface
     */
    getTournamentById(id: string, options?: AxiosRequestConfig): AxiosPromise<TournamentDetailsDto>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApiInterface
     */
    getTournaments(options?: AxiosRequestConfig): AxiosPromise<Array<TournamentDto>>;

}

/**
 * TournamentApi - object-oriented interface
 * @export
 * @class TournamentApi
 * @extends {BaseAPI}
 */
export class TournamentApi extends BaseAPI implements TournamentApiInterface {
    /**
     * 
     * @param {KnockoutTournamentForCreation} [knockoutTournamentForCreation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public createKnockoutTournament(knockoutTournamentForCreation?: KnockoutTournamentForCreation, options?: AxiosRequestConfig) {
        return TournamentApiFp(this.configuration).createKnockoutTournament(knockoutTournamentForCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public getTournamentById(id: string, options?: AxiosRequestConfig) {
        return TournamentApiFp(this.configuration).getTournamentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public getTournaments(options?: AxiosRequestConfig) {
        return TournamentApiFp(this.configuration).getTournaments(options).then((request) => request(this.axios, this.basePath));
    }
}


