//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ApiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateFixtureScores(id: string, body: UpdateScoreDto | undefined , cancelToken?: CancelToken | undefined): Promise<FixtureDto> {
        let url_ = this.baseUrl + "/api/fixtures/{id}/score";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateFixtureScores(_response);
        });
    }

    protected processUpdateFixtureScores(response: AxiosResponse): Promise<FixtureDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = FixtureDto.fromJS(resultData200);
            return Promise.resolve<FixtureDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FixtureDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateGroup(id: string, body: UpdateGroup | undefined , cancelToken?: CancelToken | undefined): Promise<GroupDto> {
        let url_ = this.baseUrl + "/api/groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateGroup(_response);
        });
    }

    protected processUpdateGroup(response: AxiosResponse): Promise<GroupDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GroupDto.fromJS(resultData200);
            return Promise.resolve<GroupDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GroupDto>(null as any);
    }

    /**
     * @return Success
     */
    getGroupMatches(id: string , cancelToken?: CancelToken | undefined): Promise<MatchDto[]> {
        let url_ = this.baseUrl + "/api/groups/{id}/matches";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetGroupMatches(_response);
        });
    }

    protected processGetGroupMatches(response: AxiosResponse): Promise<MatchDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MatchDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<MatchDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MatchDto[]>(null as any);
    }

    /**
     * @return Success
     */
    getTournaments(  cancelToken?: CancelToken | undefined): Promise<TournamentDto[]> {
        let url_ = this.baseUrl + "/api/tournaments";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTournaments(_response);
        });
    }

    protected processGetTournaments(response: AxiosResponse): Promise<TournamentDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TournamentDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<TournamentDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TournamentDto[]>(null as any);
    }

    /**
     * @return Success
     */
    getTournamentById(id: string , cancelToken?: CancelToken | undefined): Promise<KnockoutTournamentDetails> {
        let url_ = this.baseUrl + "/api/tournaments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTournamentById(_response);
        });
    }

    protected processGetTournamentById(response: AxiosResponse): Promise<KnockoutTournamentDetails> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = KnockoutTournamentDetails.fromJS(resultData200);
            return Promise.resolve<KnockoutTournamentDetails>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<KnockoutTournamentDetails>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateTournament(id: string, body: UpdateTournament | undefined , cancelToken?: CancelToken | undefined): Promise<KnockoutTournamentDetails> {
        let url_ = this.baseUrl + "/api/tournaments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateTournament(_response);
        });
    }

    protected processUpdateTournament(response: AxiosResponse): Promise<KnockoutTournamentDetails> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = KnockoutTournamentDetails.fromJS(resultData200);
            return Promise.resolve<KnockoutTournamentDetails>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<KnockoutTournamentDetails>(null as any);
    }

    /**
     * Create a knockout tournament
     * @param body (optional) {
    "name": "World Cup"
    }
     * @return Success
     */
    createKnockoutTournament(body: KnockoutTournamentForCreation | undefined , cancelToken?: CancelToken | undefined): Promise<KnockoutTournamentDetails> {
        let url_ = this.baseUrl + "/api/tournaments/knockout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateKnockoutTournament(_response);
        });
    }

    protected processCreateKnockoutTournament(response: AxiosResponse): Promise<KnockoutTournamentDetails> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = KnockoutTournamentDetails.fromJS(resultData200);
            return Promise.resolve<KnockoutTournamentDetails>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<KnockoutTournamentDetails>(null as any);
    }

    /**
     * @param type (optional) 
     * @return Success
     */
    getTournamentMatches(id: string, type: MatchType | undefined , cancelToken?: CancelToken | undefined): Promise<MatchDto[]> {
        let url_ = this.baseUrl + "/api/tournaments/{id}/matches?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTournamentMatches(_response);
        });
    }

    protected processGetTournamentMatches(response: AxiosResponse): Promise<MatchDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MatchDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<MatchDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MatchDto[]>(null as any);
    }

    /**
     * @param type (optional) 
     * @return Success
     */
    getTournamentFixtures(id: string, type: MatchType | undefined , cancelToken?: CancelToken | undefined): Promise<FixtureDto[]> {
        let url_ = this.baseUrl + "/api/tournaments/{id}/fixtures?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTournamentFixtures(_response);
        });
    }

    protected processGetTournamentFixtures(response: AxiosResponse): Promise<FixtureDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FixtureDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<FixtureDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FixtureDto[]>(null as any);
    }

    /**
     * @return Success
     */
    getGroups(id: string , cancelToken?: CancelToken | undefined): Promise<GroupDto[]> {
        let url_ = this.baseUrl + "/api/tournaments/{id}/groups";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetGroups(_response);
        });
    }

    protected processGetGroups(response: AxiosResponse): Promise<GroupDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GroupDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GroupDto[]>(null as any);
    }
}

export class FixtureDto implements IFixtureDto {
    id!: string;
    no!: number;
    dateTime?: Date | undefined;
    homeScore?: number | undefined;
    awayScore?: number | undefined;
    home!: TeamDto;
    away!: TeamDto;

    constructor(data?: IFixtureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.home = new TeamDto();
            this.away = new TeamDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.no = _data["no"];
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.homeScore = _data["homeScore"];
            this.awayScore = _data["awayScore"];
            this.home = _data["home"] ? TeamDto.fromJS(_data["home"]) : new TeamDto();
            this.away = _data["away"] ? TeamDto.fromJS(_data["away"]) : new TeamDto();
        }
    }

    static fromJS(data: any): FixtureDto {
        data = typeof data === 'object' ? data : {};
        let result = new FixtureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["no"] = this.no;
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["homeScore"] = this.homeScore;
        data["awayScore"] = this.awayScore;
        data["home"] = this.home ? this.home.toJSON() : <any>undefined;
        data["away"] = this.away ? this.away.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFixtureDto {
    id: string;
    no: number;
    dateTime?: Date | undefined;
    homeScore?: number | undefined;
    awayScore?: number | undefined;
    home: TeamDto;
    away: TeamDto;
}

export class GroupDto implements IGroupDto {
    id!: string;
    name!: string;
    shortName!: string;
    teams!: TeamDto[];
    fixtures!: FixtureDto[];

    constructor(data?: IGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.teams = [];
            this.fixtures = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            if (Array.isArray(_data["teams"])) {
                this.teams = [] as any;
                for (let item of _data["teams"])
                    this.teams!.push(TeamDto.fromJS(item));
            }
            if (Array.isArray(_data["fixtures"])) {
                this.fixtures = [] as any;
                for (let item of _data["fixtures"])
                    this.fixtures!.push(FixtureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new GroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        if (Array.isArray(this.teams)) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item.toJSON());
        }
        if (Array.isArray(this.fixtures)) {
            data["fixtures"] = [];
            for (let item of this.fixtures)
                data["fixtures"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGroupDto {
    id: string;
    name: string;
    shortName: string;
    teams: TeamDto[];
    fixtures: FixtureDto[];
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    protected _discriminator: string;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ProblemDetails";
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        if (data["TypeName"] === "HttpValidationProblemDetails") {
            let result = new HttpValidationProblemDetails();
            result.init(data);
            return result;
        }
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["TypeName"] = this._discriminator;
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class HttpValidationProblemDetails extends ProblemDetails implements IHttpValidationProblemDetails {
    readonly errors?: { [key: string]: string[]; };

    [key: string]: any;

    constructor(data?: IHttpValidationProblemDetails) {
        super(data);
        this._discriminator = "HttpValidationProblemDetails";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (_data["errors"]) {
                (<any>this).errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>(<any>this).errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): HttpValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HttpValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export interface IHttpValidationProblemDetails extends IProblemDetails {
    errors?: { [key: string]: string[]; };

    [key: string]: any;
}

export class TournamentDetailsDto implements ITournamentDetailsDto {
    id!: string;
    name!: string;
    date!: Date;
    tournamentType!: string;

    protected _discriminator: string;

    constructor(data?: ITournamentDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "TournamentDetailsDto";
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.tournamentType = _data["tournamentType"];
        }
    }

    static fromJS(data: any): TournamentDetailsDto {
        data = typeof data === 'object' ? data : {};
        if (data["TypeName"] === "KnockoutTournamentDetails") {
            let result = new KnockoutTournamentDetails();
            result.init(data);
            return result;
        }
        if (data["TypeName"] === "LeagueDetails") {
            let result = new LeagueDetails();
            result.init(data);
            return result;
        }
        let result = new TournamentDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TypeName"] = this._discriminator;
        data["id"] = this.id;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["tournamentType"] = this.tournamentType;
        return data;
    }
}

export interface ITournamentDetailsDto {
    id: string;
    name: string;
    date: Date;
    tournamentType: string;
}

export class KnockoutTournamentDetails extends TournamentDetailsDto implements IKnockoutTournamentDetails {
    groups!: GroupDto[];

    constructor(data?: IKnockoutTournamentDetails) {
        super(data);
        if (!data) {
            this.groups = [];
        }
        this._discriminator = "KnockoutTournamentDetails";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(GroupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KnockoutTournamentDetails {
        data = typeof data === 'object' ? data : {};
        let result = new KnockoutTournamentDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IKnockoutTournamentDetails extends ITournamentDetailsDto {
    groups: GroupDto[];
}

/** Used when creating a new knockout tournament */
export class KnockoutTournamentForCreation implements IKnockoutTournamentForCreation {
    /** Name of the tournament which will be visible to all users. */
    name!: string;
    /** The date when the tournament starts */
    date!: Date;
    /** The total number of teams participating in the tournament */
    numTeams!: number;
    /** The number of groups.
The teams will be divided evenly between the groups. */
    numGroups!: number;
    /** How many matches are played against each team in the group stage */
    groupStageLegs!: number;
    /** How many teams are promoted from the group stage to the knockout stages */
    numPromoted!: number;
    /** How many fixtures are played in each knockout match.
Set 2 if for example if there is a home and away game */
    knockoutLegs!: number;

    constructor(data?: IKnockoutTournamentForCreation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.numTeams = _data["numTeams"];
            this.numGroups = _data["numGroups"];
            this.groupStageLegs = _data["groupStageLegs"];
            this.numPromoted = _data["numPromoted"];
            this.knockoutLegs = _data["knockoutLegs"];
        }
    }

    static fromJS(data: any): KnockoutTournamentForCreation {
        data = typeof data === 'object' ? data : {};
        let result = new KnockoutTournamentForCreation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["numTeams"] = this.numTeams;
        data["numGroups"] = this.numGroups;
        data["groupStageLegs"] = this.groupStageLegs;
        data["numPromoted"] = this.numPromoted;
        data["knockoutLegs"] = this.knockoutLegs;
        return data;
    }
}

/** Used when creating a new knockout tournament */
export interface IKnockoutTournamentForCreation {
    /** Name of the tournament which will be visible to all users. */
    name: string;
    /** The date when the tournament starts */
    date: Date;
    /** The total number of teams participating in the tournament */
    numTeams: number;
    /** The number of groups.
The teams will be divided evenly between the groups. */
    numGroups: number;
    /** How many matches are played against each team in the group stage */
    groupStageLegs: number;
    /** How many teams are promoted from the group stage to the knockout stages */
    numPromoted: number;
    /** How many fixtures are played in each knockout match.
Set 2 if for example if there is a home and away game */
    knockoutLegs: number;
}

export class LeagueDetails extends TournamentDetailsDto implements ILeagueDetails {
    teams!: TeamDto[];

    constructor(data?: ILeagueDetails) {
        super(data);
        if (!data) {
            this.teams = [];
        }
        this._discriminator = "LeagueDetails";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["teams"])) {
                this.teams = [] as any;
                for (let item of _data["teams"])
                    this.teams!.push(TeamDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LeagueDetails {
        data = typeof data === 'object' ? data : {};
        let result = new LeagueDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.teams)) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ILeagueDetails extends ITournamentDetailsDto {
    teams: TeamDto[];
}

export class MatchDto implements IMatchDto {
    id!: string;
    round?: number | undefined;
    roundOf?: number | undefined;
    roundOfLabel!: string;
    no!: number;
    home!: TeamDto;
    away!: TeamDto;

    constructor(data?: IMatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.home = new TeamDto();
            this.away = new TeamDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.round = _data["round"];
            this.roundOf = _data["roundOf"];
            this.roundOfLabel = _data["roundOfLabel"];
            this.no = _data["no"];
            this.home = _data["home"] ? TeamDto.fromJS(_data["home"]) : new TeamDto();
            this.away = _data["away"] ? TeamDto.fromJS(_data["away"]) : new TeamDto();
        }
    }

    static fromJS(data: any): MatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new MatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["round"] = this.round;
        data["roundOf"] = this.roundOf;
        data["roundOfLabel"] = this.roundOfLabel;
        data["no"] = this.no;
        data["home"] = this.home ? this.home.toJSON() : <any>undefined;
        data["away"] = this.away ? this.away.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMatchDto {
    id: string;
    round?: number | undefined;
    roundOf?: number | undefined;
    roundOfLabel: string;
    no: number;
    home: TeamDto;
    away: TeamDto;
}

/** Determine which matches are retrieved to avoid mixing group matches with knockouts etc. */
export enum MatchType {
    Knockout = "Knockout",
    Group = "Group",
    All = "All",
}

export class TeamDto implements ITeamDto {
    id!: string;
    name!: string;
    points!: number;

    constructor(data?: ITeamDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.points = _data["points"];
        }
    }

    static fromJS(data: any): TeamDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["points"] = this.points;
        return data;
    }
}

export interface ITeamDto {
    id: string;
    name: string;
    points: number;
}

export class TournamentDto implements ITournamentDto {
    id!: string;
    name!: string;
    date!: Date;
    tournamentType!: string;

    constructor(data?: ITournamentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.tournamentType = _data["tournamentType"];
        }
    }

    static fromJS(data: any): TournamentDto {
        data = typeof data === 'object' ? data : {};
        let result = new TournamentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["tournamentType"] = this.tournamentType;
        return data;
    }
}

export interface ITournamentDto {
    id: string;
    name: string;
    date: Date;
    tournamentType: string;
}

export class UpdateGroup implements IUpdateGroup {
    name!: string;
    teams!: UpdateTeam[];

    constructor(data?: IUpdateGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.teams = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["teams"])) {
                this.teams = [] as any;
                for (let item of _data["teams"])
                    this.teams!.push(UpdateTeam.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateGroup {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.teams)) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateGroup {
    name: string;
    teams: UpdateTeam[];
}

export class UpdateScoreDto implements IUpdateScoreDto {
    homeScore?: number | undefined;
    awayScore?: number | undefined;

    constructor(data?: IUpdateScoreDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.homeScore = _data["homeScore"];
            this.awayScore = _data["awayScore"];
        }
    }

    static fromJS(data: any): UpdateScoreDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateScoreDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["homeScore"] = this.homeScore;
        data["awayScore"] = this.awayScore;
        return data;
    }
}

export interface IUpdateScoreDto {
    homeScore?: number | undefined;
    awayScore?: number | undefined;
}

export class UpdateTeam implements IUpdateTeam {
    id!: string;
    name!: string;

    constructor(data?: IUpdateTeam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateTeam {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTeam();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUpdateTeam {
    id: string;
    name: string;
}

export class UpdateTournament implements IUpdateTournament {
    name!: string;
    date!: Date;

    constructor(data?: IUpdateTournament) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateTournament {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTournament();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateTournament {
    name: string;
    date: Date;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}