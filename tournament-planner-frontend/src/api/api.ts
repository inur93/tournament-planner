/* tslint:disable */
/* eslint-disable */
/**
 * NC.Executers.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Competition
 */
export interface Competition {
    /**
     * 
     * @type {number}
     * @memberof Competition
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Competition
     */
    'isActive': boolean;
    /**
     * 
     * @type {number}
     * @memberof Competition
     */
    'numPlayers': number;
    /**
     * 
     * @type {number}
     * @memberof Competition
     */
    'numSubstitutes': number;
}
/**
 * 
 * @export
 * @interface CreateCompetition
 */
export interface CreateCompetition {
    /**
     * 
     * @type {string}
     * @memberof CreateCompetition
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompetition
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateCompetition
     */
    'numPlayers': number;
    /**
     * 
     * @type {number}
     * @memberof CreateCompetition
     */
    'numSubstitutes': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCompetition
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface CreateGuestPlayer
 */
export interface CreateGuestPlayer {
    /**
     * 
     * @type {string}
     * @memberof CreateGuestPlayer
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateMatch
 */
export interface CreateMatch {
    /**
     * 
     * @type {number}
     * @memberof CreateMatch
     */
    'seasonId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMatch
     */
    'competitionId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateMatch
     */
    'dateTime': string;
    /**
     * 
     * @type {number}
     * @memberof CreateMatch
     */
    'homeTeamId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMatch
     */
    'awayTeamId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateMatch
     */
    'location'?: string | null;
}
/**
 * 
 * @export
 * @interface CreatePlayer
 */
export interface CreatePlayer {
    /**
     * 
     * @type {string}
     * @memberof CreatePlayer
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePlayer
     */
    'nickname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePlayer
     */
    'number'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateSeason
 */
export interface CreateSeason {
    /**
     * 
     * @type {string}
     * @memberof CreateSeason
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSeason
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSeason
     */
    'end': string;
}
/**
 * 
 * @export
 * @interface CreateSignup
 */
export interface CreateSignup {
    /**
     * 
     * @type {number}
     * @memberof CreateSignup
     */
    'matchId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateSignup
     */
    'playerId'?: number | null;
}
/**
 * 
 * @export
 * @interface CreateTeam
 */
export interface CreateTeam {
    /**
     * 
     * @type {string}
     * @memberof CreateTeam
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTeam
     */
    'isNc': boolean;
}
/**
 * 
 * @export
 * @interface ImportMatch
 */
export interface ImportMatch {
    /**
     * 
     * @type {number}
     * @memberof ImportMatch
     */
    'seasonId': number;
    /**
     * 
     * @type {number}
     * @memberof ImportMatch
     */
    'competitionId': number;
    /**
     * 
     * @type {string}
     * @memberof ImportMatch
     */
    'dateTime': string;
    /**
     * 
     * @type {string}
     * @memberof ImportMatch
     */
    'homeTeamName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImportMatch
     */
    'awayTeamName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImportMatch
     */
    'location'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Match
 */
export interface Match {
    /**
     * 
     * @type {number}
     * @memberof Match
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Match
     */
    'seasonId': number;
    /**
     * 
     * @type {Season}
     * @memberof Match
     */
    'season': Season;
    /**
     * 
     * @type {number}
     * @memberof Match
     */
    'competitionId': number;
    /**
     * 
     * @type {Competition}
     * @memberof Match
     */
    'competition': Competition;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'dateTime': string;
    /**
     * 
     * @type {number}
     * @memberof Match
     */
    'homeTeamId': number;
    /**
     * 
     * @type {Team}
     * @memberof Match
     */
    'homeTeam'?: Team;
    /**
     * 
     * @type {number}
     * @memberof Match
     */
    'awayTeamId': number;
    /**
     * 
     * @type {Team}
     * @memberof Match
     */
    'awayTeam'?: Team;
    /**
     * 
     * @type {number}
     * @memberof Match
     */
    'homeScore'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Match
     */
    'awayScore'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'location'?: string | null;
}
/**
 * 
 * @export
 * @interface MatchImportSummary
 */
export interface MatchImportSummary {
    /**
     * 
     * @type {number}
     * @memberof MatchImportSummary
     */
    'matchesCreated': number;
    /**
     * 
     * @type {number}
     * @memberof MatchImportSummary
     */
    'teamsCreated': number;
    /**
     * 
     * @type {Array<MatchValidation>}
     * @memberof MatchImportSummary
     */
    'messages': Array<MatchValidation>;
    /**
     * 
     * @type {number}
     * @memberof MatchImportSummary
     */
    'errors': number;
    /**
     * 
     * @type {number}
     * @memberof MatchImportSummary
     */
    'warnings': number;
}
/**
 * 
 * @export
 * @interface MatchValidation
 */
export interface MatchValidation {
    /**
     * 
     * @type {number}
     * @memberof MatchValidation
     */
    'row': number;
    /**
     * 
     * @type {string}
     * @memberof MatchValidation
     */
    'column': string;
    /**
     * 
     * @type {string}
     * @memberof MatchValidation
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof MatchValidation
     */
    'formattedMessage': string;
    /**
     * 
     * @type {MessageLevel}
     * @memberof MatchValidation
     */
    'level': MessageLevel;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MessageLevel = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type MessageLevel = typeof MessageLevel[keyof typeof MessageLevel];


/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof Player
     */
    'isAdmin': boolean;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'nickname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'number'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Player
     */
    'isGuest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'externalUserId'?: string | null;
}
/**
 * 
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
    /**
     * 
     * @type {number}
     * @memberof ProfileDto
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'isAdmin': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'nickname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'number'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'isGuest': boolean;
}
/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Season
 */
export interface Season {
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'end': string;
}
/**
 * 
 * @export
 * @interface Signup
 */
export interface Signup {
    /**
     * 
     * @type {number}
     * @memberof Signup
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Signup
     */
    'playerId': number;
    /**
     * 
     * @type {Player}
     * @memberof Signup
     */
    'player'?: Player;
    /**
     * 
     * @type {number}
     * @memberof Signup
     */
    'matchId': number;
    /**
     * 
     * @type {Match}
     * @memberof Signup
     */
    'match'?: Match;
    /**
     * 
     * @type {boolean}
     * @memberof Signup
     */
    'noShow': boolean;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Team
     */
    'isNc': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Team
     */
    'isActive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Team
     */
    'deleted': boolean;
}
/**
 * 
 * @export
 * @interface UpdateCompetition
 */
export interface UpdateCompetition {
    /**
     * 
     * @type {string}
     * @memberof UpdateCompetition
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompetition
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateCompetition
     */
    'numPlayers': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCompetition
     */
    'numSubstitutes': number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateCompetition
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface UpdateMatch
 */
export interface UpdateMatch {
    /**
     * 
     * @type {number}
     * @memberof UpdateMatch
     */
    'seasonId': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMatch
     */
    'competitionId': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateMatch
     */
    'dateTime': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateMatch
     */
    'homeTeamId': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMatch
     */
    'awayTeamId': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMatch
     */
    'homeScore'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateMatch
     */
    'awayScore'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateMatch
     */
    'location'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdatePlayer
 */
export interface UpdatePlayer {
    /**
     * 
     * @type {string}
     * @memberof UpdatePlayer
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlayer
     */
    'nickname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlayer
     */
    'number'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateProfile
 */
export interface UpdateProfile {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfile
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfile
     */
    'nickname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfile
     */
    'number'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateSeason
 */
export interface UpdateSeason {
    /**
     * 
     * @type {string}
     * @memberof UpdateSeason
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSeason
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSeason
     */
    'end': string;
}
/**
 * 
 * @export
 * @interface UpdateSignup
 */
export interface UpdateSignup {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateSignup
     */
    'noShow': boolean;
}
/**
 * 
 * @export
 * @interface UpdateTeam
 */
export interface UpdateTeam {
    /**
     * 
     * @type {string}
     * @memberof UpdateTeam
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateTeam
     */
    'isNc': boolean;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginDto?: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDto} [registerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerDto?: RegisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginDto?: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterDto} [registerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerDto?: RegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginDto?: LoginDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.login(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterDto} [registerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerDto?: RegisterDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.register(registerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 
     * @param {LoginDto} [loginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    login(loginDto?: LoginDto, options?: AxiosRequestConfig): AxiosPromise<UserDto>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    logout(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {RegisterDto} [registerDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    register(registerDto?: RegisterDto, options?: AxiosRequestConfig): AxiosPromise<UserDto>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 
     * @param {LoginDto} [loginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginDto?: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterDto} [registerDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public register(registerDto?: RegisterDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).register(registerDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompetitionsApi - axios parameter creator
 * @export
 */
export const CompetitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetition: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCompetition', 'id', id)
            const localVarPath = `/api/Competitions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionMatches: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCompetitionMatches', 'id', id)
            const localVarPath = `/api/Competitions/{id}/matches`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitons: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Competitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCompetition} [createCompetition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompetition: async (createCompetition?: CreateCompetition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Competitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCompetition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCompetition} [updateCompetition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCompetition: async (id: number, updateCompetition?: UpdateCompetition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCompetition', 'id', id)
            const localVarPath = `/api/Competitions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCompetition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompetitionsApi - functional programming interface
 * @export
 */
export const CompetitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompetitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetition(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetition(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetitionMatches(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Match>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetitionMatches(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetitons(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Competition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetitons(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCompetition} [createCompetition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCompetition(createCompetition?: CreateCompetition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompetition(createCompetition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCompetition} [updateCompetition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCompetition(id: number, updateCompetition?: UpdateCompetition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCompetition(id, updateCompetition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompetitionsApi - factory interface
 * @export
 */
export const CompetitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompetitionsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetition(id: number, options?: any): AxiosPromise<Competition> {
            return localVarFp.getCompetition(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionMatches(id: number, options?: any): AxiosPromise<Array<Match>> {
            return localVarFp.getCompetitionMatches(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitons(options?: any): AxiosPromise<Array<Competition>> {
            return localVarFp.getCompetitons(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCompetition} [createCompetition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompetition(createCompetition?: CreateCompetition, options?: any): AxiosPromise<Competition> {
            return localVarFp.postCompetition(createCompetition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCompetition} [updateCompetition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCompetition(id: number, updateCompetition?: UpdateCompetition, options?: any): AxiosPromise<void> {
            return localVarFp.putCompetition(id, updateCompetition, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompetitionsApi - interface
 * @export
 * @interface CompetitionsApi
 */
export interface CompetitionsApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApiInterface
     */
    getCompetition(id: number, options?: AxiosRequestConfig): AxiosPromise<Competition>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApiInterface
     */
    getCompetitionMatches(id: number, options?: AxiosRequestConfig): AxiosPromise<Array<Match>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApiInterface
     */
    getCompetitons(options?: AxiosRequestConfig): AxiosPromise<Array<Competition>>;

    /**
     * 
     * @param {CreateCompetition} [createCompetition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApiInterface
     */
    postCompetition(createCompetition?: CreateCompetition, options?: AxiosRequestConfig): AxiosPromise<Competition>;

    /**
     * 
     * @param {number} id 
     * @param {UpdateCompetition} [updateCompetition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApiInterface
     */
    putCompetition(id: number, updateCompetition?: UpdateCompetition, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CompetitionsApi - object-oriented interface
 * @export
 * @class CompetitionsApi
 * @extends {BaseAPI}
 */
export class CompetitionsApi extends BaseAPI implements CompetitionsApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetition(id: number, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetition(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetitionMatches(id: number, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetitionMatches(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetitons(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetitons(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCompetition} [createCompetition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public postCompetition(createCompetition?: CreateCompetition, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).postCompetition(createCompetition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateCompetition} [updateCompetition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public putCompetition(id: number, updateCompetition?: UpdateCompetition, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).putCompetition(id, updateCompetition, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MatchesApi - axios parameter creator
 * @export
 */
export const MatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMatch: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMatch', 'id', id)
            const localVarPath = `/api/Matches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatch: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMatch', 'id', id)
            const localVarPath = `/api/Matches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchSignups: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMatchSignups', 'id', id)
            const localVarPath = `/api/Matches/{id}/signups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [from] 
         * @param {number} [count] 
         * @param {number} [competitionId] 
         * @param {number} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatches: async (from?: string, count?: number, competitionId?: number, seasonId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Matches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (competitionId !== undefined) {
                localVarQueryParameter['competitionId'] = competitionId;
            }

            if (seasonId !== undefined) {
                localVarQueryParameter['seasonId'] = seasonId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextMatch: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Matches/next`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<ImportMatch>} [importMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMatches: async (importMatch?: Array<ImportMatch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Matches/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importMatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMatch} [createMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMatch: async (createMatch?: CreateMatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Matches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateMatch} [updateMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMatch: async (id: number, updateMatch?: UpdateMatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putMatch', 'id', id)
            const localVarPath = `/api/Matches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<ImportMatch>} [importMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateImport: async (importMatch?: Array<ImportMatch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Matches/import/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importMatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchesApi - functional programming interface
 * @export
 */
export const MatchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMatch(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatch(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Match>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatchSignups(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Signup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatchSignups(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [from] 
         * @param {number} [count] 
         * @param {number} [competitionId] 
         * @param {number} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatches(from?: string, count?: number, competitionId?: number, seasonId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Match>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatches(from, count, competitionId, seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNextMatch(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Match>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNextMatch(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<ImportMatch>} [importMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importMatches(importMatch?: Array<ImportMatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchImportSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importMatches(importMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateMatch} [createMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMatch(createMatch?: CreateMatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Match>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMatch(createMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateMatch} [updateMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMatch(id: number, updateMatch?: UpdateMatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putMatch(id, updateMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<ImportMatch>} [importMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateImport(importMatch?: Array<ImportMatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatchValidation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateImport(importMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MatchesApi - factory interface
 * @export
 */
export const MatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMatch(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatch(id: number, options?: any): AxiosPromise<Match> {
            return localVarFp.getMatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchSignups(id: number, options?: any): AxiosPromise<Array<Signup>> {
            return localVarFp.getMatchSignups(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [from] 
         * @param {number} [count] 
         * @param {number} [competitionId] 
         * @param {number} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatches(from?: string, count?: number, competitionId?: number, seasonId?: number, options?: any): AxiosPromise<Array<Match>> {
            return localVarFp.getMatches(from, count, competitionId, seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextMatch(options?: any): AxiosPromise<Match> {
            return localVarFp.getNextMatch(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<ImportMatch>} [importMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMatches(importMatch?: Array<ImportMatch>, options?: any): AxiosPromise<MatchImportSummary> {
            return localVarFp.importMatches(importMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateMatch} [createMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMatch(createMatch?: CreateMatch, options?: any): AxiosPromise<Match> {
            return localVarFp.postMatch(createMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateMatch} [updateMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMatch(id: number, updateMatch?: UpdateMatch, options?: any): AxiosPromise<void> {
            return localVarFp.putMatch(id, updateMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<ImportMatch>} [importMatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateImport(importMatch?: Array<ImportMatch>, options?: any): AxiosPromise<Array<MatchValidation>> {
            return localVarFp.validateImport(importMatch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchesApi - interface
 * @export
 * @interface MatchesApi
 */
export interface MatchesApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    deleteMatch(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    getMatch(id: number, options?: AxiosRequestConfig): AxiosPromise<Match>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    getMatchSignups(id: number, options?: AxiosRequestConfig): AxiosPromise<Array<Signup>>;

    /**
     * 
     * @param {string} [from] 
     * @param {number} [count] 
     * @param {number} [competitionId] 
     * @param {number} [seasonId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    getMatches(from?: string, count?: number, competitionId?: number, seasonId?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Match>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    getNextMatch(options?: AxiosRequestConfig): AxiosPromise<Match>;

    /**
     * 
     * @param {Array<ImportMatch>} [importMatch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    importMatches(importMatch?: Array<ImportMatch>, options?: AxiosRequestConfig): AxiosPromise<MatchImportSummary>;

    /**
     * 
     * @param {CreateMatch} [createMatch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    postMatch(createMatch?: CreateMatch, options?: AxiosRequestConfig): AxiosPromise<Match>;

    /**
     * 
     * @param {number} id 
     * @param {UpdateMatch} [updateMatch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    putMatch(id: number, updateMatch?: UpdateMatch, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {Array<ImportMatch>} [importMatch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    validateImport(importMatch?: Array<ImportMatch>, options?: AxiosRequestConfig): AxiosPromise<Array<MatchValidation>>;

}

/**
 * MatchesApi - object-oriented interface
 * @export
 * @class MatchesApi
 * @extends {BaseAPI}
 */
export class MatchesApi extends BaseAPI implements MatchesApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public deleteMatch(id: number, options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).deleteMatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public getMatch(id: number, options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).getMatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public getMatchSignups(id: number, options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).getMatchSignups(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [from] 
     * @param {number} [count] 
     * @param {number} [competitionId] 
     * @param {number} [seasonId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public getMatches(from?: string, count?: number, competitionId?: number, seasonId?: number, options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).getMatches(from, count, competitionId, seasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public getNextMatch(options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).getNextMatch(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<ImportMatch>} [importMatch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public importMatches(importMatch?: Array<ImportMatch>, options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).importMatches(importMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateMatch} [createMatch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public postMatch(createMatch?: CreateMatch, options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).postMatch(createMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateMatch} [updateMatch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public putMatch(id: number, updateMatch?: UpdateMatch, options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).putMatch(id, updateMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<ImportMatch>} [importMatch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public validateImport(importMatch?: Array<ImportMatch>, options?: AxiosRequestConfig) {
        return MatchesApiFp(this.configuration).validateImport(importMatch, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlayersApi - axios parameter creator
 * @export
 */
export const PlayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateGuestPlayer} [createGuestPlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGuest: async (createGuestPlayer?: CreateGuestPlayer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Players/guest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGuestPlayer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayer: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePlayer', 'id', id)
            const localVarPath = `/api/Players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlayer', 'id', id)
            const localVarPath = `/api/Players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isGuest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayers: async (isGuest?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isGuest !== undefined) {
                localVarQueryParameter['isGuest'] = isGuest;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePlayer} [createPlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlayer: async (createPlayer?: CreatePlayer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPlayer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePlayer} [updatePlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPlayer: async (id: number, updatePlayer?: UpdatePlayer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPlayer', 'id', id)
            const localVarPath = `/api/Players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePlayer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayersApi - functional programming interface
 * @export
 */
export const PlayersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateGuestPlayer} [createGuestPlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGuest(createGuestPlayer?: CreateGuestPlayer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Player>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGuest(createGuestPlayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlayer(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlayer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayer(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Player>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [isGuest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayers(isGuest?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Player>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayers(isGuest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePlayer} [createPlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlayer(createPlayer?: CreatePlayer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Player>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPlayer(createPlayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePlayer} [updatePlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPlayer(id: number, updatePlayer?: UpdatePlayer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPlayer(id, updatePlayer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlayersApi - factory interface
 * @export
 */
export const PlayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayersApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateGuestPlayer} [createGuestPlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGuest(createGuestPlayer?: CreateGuestPlayer, options?: any): AxiosPromise<Player> {
            return localVarFp.createGuest(createGuestPlayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayer(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePlayer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(id: number, options?: any): AxiosPromise<Player> {
            return localVarFp.getPlayer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [isGuest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayers(isGuest?: boolean, options?: any): AxiosPromise<Array<Player>> {
            return localVarFp.getPlayers(isGuest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePlayer} [createPlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlayer(createPlayer?: CreatePlayer, options?: any): AxiosPromise<Player> {
            return localVarFp.postPlayer(createPlayer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePlayer} [updatePlayer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPlayer(id: number, updatePlayer?: UpdatePlayer, options?: any): AxiosPromise<void> {
            return localVarFp.putPlayer(id, updatePlayer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayersApi - interface
 * @export
 * @interface PlayersApi
 */
export interface PlayersApiInterface {
    /**
     * 
     * @param {CreateGuestPlayer} [createGuestPlayer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApiInterface
     */
    createGuest(createGuestPlayer?: CreateGuestPlayer, options?: AxiosRequestConfig): AxiosPromise<Player>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApiInterface
     */
    deletePlayer(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApiInterface
     */
    getPlayer(id: number, options?: AxiosRequestConfig): AxiosPromise<Player>;

    /**
     * 
     * @param {boolean} [isGuest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApiInterface
     */
    getPlayers(isGuest?: boolean, options?: AxiosRequestConfig): AxiosPromise<Array<Player>>;

    /**
     * 
     * @param {CreatePlayer} [createPlayer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApiInterface
     */
    postPlayer(createPlayer?: CreatePlayer, options?: AxiosRequestConfig): AxiosPromise<Player>;

    /**
     * 
     * @param {number} id 
     * @param {UpdatePlayer} [updatePlayer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApiInterface
     */
    putPlayer(id: number, updatePlayer?: UpdatePlayer, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
export class PlayersApi extends BaseAPI implements PlayersApiInterface {
    /**
     * 
     * @param {CreateGuestPlayer} [createGuestPlayer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public createGuest(createGuestPlayer?: CreateGuestPlayer, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).createGuest(createGuestPlayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public deletePlayer(id: number, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).deletePlayer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public getPlayer(id: number, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).getPlayer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [isGuest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public getPlayers(isGuest?: boolean, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).getPlayers(isGuest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePlayer} [createPlayer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public postPlayer(createPlayer?: CreatePlayer, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).postPlayer(createPlayer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePlayer} [updatePlayer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public putPlayer(id: number, updatePlayer?: UpdatePlayer, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).putPlayer(id, updatePlayer, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfile} [updateProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: async (updateProfile?: UpdateProfile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateProfile} [updateProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile(updateProfile?: UpdateProfile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfile(updateProfile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myProfile(options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.myProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfile} [updateProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile(updateProfile?: UpdateProfile, options?: any): AxiosPromise<void> {
            return localVarFp.updateProfile(updateProfile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - interface
 * @export
 * @interface ProfileApi
 */
export interface ProfileApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    myProfile(options?: AxiosRequestConfig): AxiosPromise<ProfileDto>;

    /**
     * 
     * @param {UpdateProfile} [updateProfile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    updateProfile(updateProfile?: UpdateProfile, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI implements ProfileApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public myProfile(options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).myProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfile} [updateProfile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public updateProfile(updateProfile?: UpdateProfile, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).updateProfile(updateProfile, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SeasonsApi - axios parameter creator
 * @export
 */
export const SeasonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeason: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSeason', 'id', id)
            const localVarPath = `/api/Seasons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasonMatches: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSeasonMatches', 'id', id)
            const localVarPath = `/api/Seasons/{id}/seasons`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasons: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Seasons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSeason} [createSeason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSeason: async (createSeason?: CreateSeason, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Seasons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSeason, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSeason} [updateSeason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSeason: async (id: number, updateSeason?: UpdateSeason, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putSeason', 'id', id)
            const localVarPath = `/api/Seasons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSeason, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeasonsApi - functional programming interface
 * @export
 */
export const SeasonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeasonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeason(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeason(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasonMatches(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Match>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeasonMatches(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasons(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Season>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeasons(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateSeason} [createSeason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSeason(createSeason?: CreateSeason, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSeason(createSeason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSeason} [updateSeason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSeason(id: number, updateSeason?: UpdateSeason, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSeason(id, updateSeason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SeasonsApi - factory interface
 * @export
 */
export const SeasonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeasonsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeason(id: number, options?: any): AxiosPromise<Season> {
            return localVarFp.getSeason(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasonMatches(id: number, options?: any): AxiosPromise<Array<Match>> {
            return localVarFp.getSeasonMatches(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasons(options?: any): AxiosPromise<Array<Season>> {
            return localVarFp.getSeasons(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSeason} [createSeason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSeason(createSeason?: CreateSeason, options?: any): AxiosPromise<Season> {
            return localVarFp.postSeason(createSeason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSeason} [updateSeason] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSeason(id: number, updateSeason?: UpdateSeason, options?: any): AxiosPromise<void> {
            return localVarFp.putSeason(id, updateSeason, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeasonsApi - interface
 * @export
 * @interface SeasonsApi
 */
export interface SeasonsApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApiInterface
     */
    getSeason(id: number, options?: AxiosRequestConfig): AxiosPromise<Season>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApiInterface
     */
    getSeasonMatches(id: number, options?: AxiosRequestConfig): AxiosPromise<Array<Match>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApiInterface
     */
    getSeasons(options?: AxiosRequestConfig): AxiosPromise<Array<Season>>;

    /**
     * 
     * @param {CreateSeason} [createSeason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApiInterface
     */
    postSeason(createSeason?: CreateSeason, options?: AxiosRequestConfig): AxiosPromise<Season>;

    /**
     * 
     * @param {number} id 
     * @param {UpdateSeason} [updateSeason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApiInterface
     */
    putSeason(id: number, updateSeason?: UpdateSeason, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * SeasonsApi - object-oriented interface
 * @export
 * @class SeasonsApi
 * @extends {BaseAPI}
 */
export class SeasonsApi extends BaseAPI implements SeasonsApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public getSeason(id: number, options?: AxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).getSeason(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public getSeasonMatches(id: number, options?: AxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).getSeasonMatches(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public getSeasons(options?: AxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).getSeasons(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSeason} [createSeason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public postSeason(createSeason?: CreateSeason, options?: AxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).postSeason(createSeason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateSeason} [updateSeason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public putSeason(id: number, updateSeason?: UpdateSeason, options?: AxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).putSeason(id, updateSeason, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SignupsApi - axios parameter creator
 * @export
 */
export const SignupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignup: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSignup', 'id', id)
            const localVarPath = `/api/Signups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignup: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSignup', 'id', id)
            const localVarPath = `/api/Signups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Signups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSignup} [createSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignup: async (createSignup?: CreateSignup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Signups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSignup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSignup} [updateSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSignup: async (id: number, updateSignup?: UpdateSignup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putSignup', 'id', id)
            const localVarPath = `/api/Signups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSignup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignupsApi - functional programming interface
 * @export
 */
export const SignupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSignup(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSignup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignup(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Signup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateSignup} [createSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSignup(createSignup?: CreateSignup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSignup(createSignup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSignup} [updateSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSignup(id: number, updateSignup?: UpdateSignup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSignup(id, updateSignup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignupsApi - factory interface
 * @export
 */
export const SignupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignupsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignup(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSignup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignup(id: number, options?: any): AxiosPromise<Signup> {
            return localVarFp.getSignup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignups(options?: any): AxiosPromise<Array<Signup>> {
            return localVarFp.getSignups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSignup} [createSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignup(createSignup?: CreateSignup, options?: any): AxiosPromise<Signup> {
            return localVarFp.postSignup(createSignup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSignup} [updateSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSignup(id: number, updateSignup?: UpdateSignup, options?: any): AxiosPromise<void> {
            return localVarFp.putSignup(id, updateSignup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignupsApi - interface
 * @export
 * @interface SignupsApi
 */
export interface SignupsApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApiInterface
     */
    deleteSignup(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApiInterface
     */
    getSignup(id: number, options?: AxiosRequestConfig): AxiosPromise<Signup>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApiInterface
     */
    getSignups(options?: AxiosRequestConfig): AxiosPromise<Array<Signup>>;

    /**
     * 
     * @param {CreateSignup} [createSignup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApiInterface
     */
    postSignup(createSignup?: CreateSignup, options?: AxiosRequestConfig): AxiosPromise<Signup>;

    /**
     * 
     * @param {number} id 
     * @param {UpdateSignup} [updateSignup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApiInterface
     */
    putSignup(id: number, updateSignup?: UpdateSignup, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * SignupsApi - object-oriented interface
 * @export
 * @class SignupsApi
 * @extends {BaseAPI}
 */
export class SignupsApi extends BaseAPI implements SignupsApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApi
     */
    public deleteSignup(id: number, options?: AxiosRequestConfig) {
        return SignupsApiFp(this.configuration).deleteSignup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApi
     */
    public getSignup(id: number, options?: AxiosRequestConfig) {
        return SignupsApiFp(this.configuration).getSignup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApi
     */
    public getSignups(options?: AxiosRequestConfig) {
        return SignupsApiFp(this.configuration).getSignups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSignup} [createSignup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApi
     */
    public postSignup(createSignup?: CreateSignup, options?: AxiosRequestConfig) {
        return SignupsApiFp(this.configuration).postSignup(createSignup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateSignup} [updateSignup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupsApi
     */
    public putSignup(id: number, updateSignup?: UpdateSignup, options?: AxiosRequestConfig) {
        return SignupsApiFp(this.configuration).putSignup(id, updateSignup, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTeam', 'id', id)
            const localVarPath = `/api/Teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTeam', 'id', id)
            const localVarPath = `/api/Teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTeam} [createTeam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeam: async (createTeam?: CreateTeam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTeam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateTeam} [updateTeam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeam: async (id: number, updateTeam?: UpdateTeam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTeam', 'id', id)
            const localVarPath = `/api/Teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTeam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeam(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeam(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeam(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeam(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Team>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTeam} [createTeam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeam(createTeam?: CreateTeam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTeam(createTeam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateTeam} [updateTeam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTeam(id: number, updateTeam?: UpdateTeam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTeam(id, updateTeam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(id: number, options?: any): AxiosPromise<Team> {
            return localVarFp.getTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeams(options?: any): AxiosPromise<Array<Team>> {
            return localVarFp.getTeams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTeam} [createTeam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeam(createTeam?: CreateTeam, options?: any): AxiosPromise<Team> {
            return localVarFp.postTeam(createTeam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateTeam} [updateTeam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeam(id: number, updateTeam?: UpdateTeam, options?: any): AxiosPromise<void> {
            return localVarFp.putTeam(id, updateTeam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - interface
 * @export
 * @interface TeamsApi
 */
export interface TeamsApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteTeam(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeam(id: number, options?: AxiosRequestConfig): AxiosPromise<Team>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeams(options?: AxiosRequestConfig): AxiosPromise<Array<Team>>;

    /**
     * 
     * @param {CreateTeam} [createTeam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    postTeam(createTeam?: CreateTeam, options?: AxiosRequestConfig): AxiosPromise<Team>;

    /**
     * 
     * @param {number} id 
     * @param {UpdateTeam} [updateTeam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    putTeam(id: number, updateTeam?: UpdateTeam, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI implements TeamsApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteTeam(id: number, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteTeam(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(id: number, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeam(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeams(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTeam} [createTeam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postTeam(createTeam?: CreateTeam, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postTeam(createTeam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateTeam} [updateTeam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public putTeam(id: number, updateTeam?: UpdateTeam, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).putTeam(id, updateTeam, options).then((request) => request(this.axios, this.basePath));
    }
}


